// Base URL cho API (backend ch·∫°y tr√™n localhost:8080 v·ªõi prefix /api)
const API_URL = 'http://localhost:8080/api/products';

// C√°c y·∫øu t·ªë DOM
const productForm = document.getElementById('productForm');
const productNameInput = document.getElementById('productName');
const productDescriptionInput = document.getElementById('productDescription');
const productPriceInput = document.getElementById('productPrice');
const submitBtn = document.getElementById('submitBtn');
const cancelBtn = document.getElementById('cancelBtn');
const productTableBody = document.getElementById('productTableBody');
const loading = document.getElementById('loading');
const noProducts = document.getElementById('noProducts');
const refreshBtn = document.getElementById('refreshBtn');

// Bi·∫øn tr·∫°ng th√°iiiiiiiiii
let editingProductId = null;
let allProducts = [];

// H√†m qu·∫£n l√Ω URL routing
function updateURL(action, id = null) {
    let newURL = window.location.origin + window.location.pathname;
    let params = new URLSearchParams();

    if (action && action !== 'list') {
        params.set('action', action);
    }
    if (id) {
        params.set('id', id);
    }

    const queryString = params.toString();
    if (queryString) {
        newURL += '?' + queryString;
    }

    // C·∫≠p nh·∫≠t URL m√† kh√¥ng reload trang
    window.history.pushState({ action, id }, '', newURL);

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã URL
    const currentURL = document.getElementById('currentURL');
    if (currentURL) {
        currentURL.textContent = newURL;
    }
}

// H√†m x·ª≠ l√Ω khi user click back/forward browser
function handlePopState(event) {
    const urlParams = new URLSearchParams(window.location.search);
    const action = urlParams.get('action') || 'list';
    const id = urlParams.get('id');

    // X·ª≠ l√Ω theo action
    switch(action) {
        case 'add':
            resetForm();
            break;
        case 'edit':
            if (id) {
                editProduct(parseInt(id));
            }
            break;
        case 'delete':
            if (id) {
                showDeleteModal(parseInt(id));
            }
            break;
        default:
            resetForm();
            break;
    }
}

// H√†m format gi√° ti·ªÅn
function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(price);
}

// H√†m load s·∫£n ph·∫©m t·ª´ API
async function loadProducts() {
    loading.style.display = 'block';
    updateURL('list'); // C·∫≠p nh·∫≠t URL khi load danh s√°ch

    try {
        console.log('ƒêang g·ªçi API:', API_URL); // Debug log
        const response = await fetch(API_URL);
        console.log('Response status:', response.status); // Debug log

        if (!response.ok) {
            const errorText = await response.text();
            console.error('API Error:', response.status, errorText);
            throw new Error(`API Error: ${response.status} - ${errorText}`);
        }

        allProducts = await response.json();
        console.log('Loaded products:', allProducts); // Debug log
        renderProducts(allProducts);
        noProducts.style.display = allProducts.length === 0 ? 'block' : 'none';
    } catch (error) {
        console.error('Error loading products:', error);
        alert(`L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m: ${error.message}`);
    } finally {
        loading.style.display = 'none';
    }
}

// H√†m render danh s√°ch s·∫£n ph·∫©m
function renderProducts(products) {
    productTableBody.innerHTML = '';
    products.forEach(product => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${product.id}</td>
            <td>${product.name}</td>
            <td>${product.description || ''}</td>
            <td>${formatPrice(product.price)}</td>
            <td>
                <button class="edit-btn" onclick="editProduct(${product.id})">‚úèÔ∏è</button>
                <button class="delete-btn" onclick="showDeleteModal(${product.id})">üóëÔ∏è</button>
            </td>
        `;
        productTableBody.appendChild(row);
    });
}

// H√†m submit form (th√™m ho·∫∑c s·ª≠a)
productForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const product = {
        name: productNameInput.value,
        description: productDescriptionInput.value,
        price: productPriceInput.value // G·ª≠i string ƒë·ªÉ t∆∞∆°ng th√≠ch BigDecimal
    };

    // C·∫≠p nh·∫≠t URL khi ƒëang th·ª±c hi·ªán thao t√°c
    const action = editingProductId ? 'updating' : 'adding';
    updateURL(action, editingProductId);

    try {
        let url = API_URL;
        let method = 'POST';
        if (editingProductId) {
            url += `/${editingProductId}`;
            method = 'PUT';
        }

        const response = await fetch(url, {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(product)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Failed to save product: ${response.status} - ${errorText}`);
        }

        resetForm();
        await loadProducts(); // S·∫Ω c·∫≠p nh·∫≠t URL v·ªÅ 'list'
    } catch (error) {
        console.error('Error saving product:', error);
        alert(`L·ªói khi l∆∞u s·∫£n ph·∫©m: ${error.message}`);
        // Quay v·ªÅ danh s√°ch n·∫øu c√≥ l·ªói
        updateURL('list');
    }
});

// H√†m edit s·∫£n ph·∫©m
function editProduct(id) {
    const product = allProducts.find(p => p.id === id);
    if (!product) return;

    // C·∫≠p nh·∫≠t URL khi b·∫Øt ƒë·∫ßu edit
    updateURL('edit', id);

    productNameInput.value = product.name;
    productDescriptionInput.value = product.description || '';
    productPriceInput.value = product.price;
    submitBtn.textContent = 'C·∫≠p Nh·∫≠t S·∫£n Ph·∫©m';
    cancelBtn.style.display = 'inline';
    editingProductId = id;
}

// H√†m reset form
function resetForm() {
    productForm.reset();
    submitBtn.textContent = 'Th√™m S·∫£n Ph·∫©m';
    cancelBtn.style.display = 'none';
    editingProductId = null;

    // C·∫≠p nh·∫≠t URL v·ªÅ tr·∫°ng th√°i th√™m m·ªõi
    updateURL('add');
}

cancelBtn.addEventListener('click', resetForm);

// Modal x√≥a
const deleteModal = document.getElementById('deleteModal');
const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
let deletingProductId = null;

function showDeleteModal(id) {
    deletingProductId = id;
    deleteModal.style.display = 'flex';
    deleteModal.classList.add('show');

    // C·∫≠p nh·∫≠t URL khi hi·ªÉn th·ªã modal x√≥a
    updateURL('delete', id);
}

cancelDeleteBtn.addEventListener('click', () => {
    deleteModal.style.display = 'none';
    deleteModal.classList.remove('show');
    deletingProductId = null;

    // Quay v·ªÅ danh s√°ch khi cancel x√≥a
    updateURL('list');
});

confirmDeleteBtn.addEventListener('click', async () => {
    if (!deletingProductId) return;

    // C·∫≠p nh·∫≠t URL khi ƒëang x√≥a
    updateURL('deleting', deletingProductId);

    try {
        const response = await fetch(`${API_URL}/${deletingProductId}`, { method: 'DELETE' });
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Failed to delete product: ${response.status} - ${errorText}`);
        }
        deleteModal.style.display = 'none';
        deleteModal.classList.remove('show');
        deletingProductId = null;
        await loadProducts(); // S·∫Ω c·∫≠p nh·∫≠t URL v·ªÅ 'list'
    } catch (error) {
        console.error('Error deleting product:', error);
        alert(`L·ªói khi x√≥a s·∫£n ph·∫©m: ${error.message}`);
        // Quay v·ªÅ danh s√°ch n·∫øu c√≥ l·ªói
        deleteModal.style.display = 'none';
        deleteModal.classList.remove('show');
        updateURL('list');
    }
});

// Event listener cho n√∫t refresh
refreshBtn.addEventListener('click', loadProducts);

// Load ban ƒë·∫ßu khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    // X·ª≠ l√Ω URL hi·ªán t·∫°i khi load trang
    const urlParams = new URLSearchParams(window.location.search);
    const action = urlParams.get('action') || 'list';
    const id = urlParams.get('id');

    // Load products tr∆∞·ªõc
    loadProducts().then(() => {
        // Sau ƒë√≥ x·ª≠ l√Ω action t·ª´ URL
        switch(action) {
            case 'edit':
                if (id && allProducts.find(p => p.id == id)) {
                    editProduct(parseInt(id));
                }
                break;
            case 'delete':
                if (id && allProducts.find(p => p.id == id)) {
                    showDeleteModal(parseInt(id));
                }
                break;
            case 'add':
                resetForm();
                break;
            default:
                // ƒê√£ load products r·ªìi, ch·ªâ c·∫ßn c·∫≠p nh·∫≠t URL
                updateURL('list');
                break;
        }
    });

    // Listen cho browser back/forward
    window.addEventListener('popstate', handlePopState);
});

// C·∫≠p nh·∫≠t URL indicator v√† demo function
document.addEventListener('DOMContentLoaded', () => {
    const currentURL = document.getElementById('currentURL');
    if (currentURL) {
        currentURL.textContent = window.location.href;
    }

    // Demo URL changes function - hi·ªÉn th·ªã c√°c URL example
    window.demonstrateURLChanges = function() {
        const examples = [
            '?action=list - Danh s√°ch s·∫£n ph·∫©m',
            '?action=add - Th√™m s·∫£n ph·∫©m m·ªõi',
            '?action=edit&id=1 - S·ª≠a s·∫£n ph·∫©m ID 1',
            '?action=delete&id=2 - X√≥a s·∫£n ph·∫©m ID 2',
            '?action=adding - ƒêang th√™m s·∫£n ph·∫©m',
            '?action=updating&id=3 - ƒêang c·∫≠p nh·∫≠t s·∫£n ph·∫©m ID 3'
        ];
        alert('üìå C√°c URL c√≥ th·ªÉ xu·∫•t hi·ªán:\n\n' + examples.join('\n'));
    };
});
